#!/usr/bin/env node

/********************
 * Node-HackerNews
 *
 * A simple CLI app that reads in HackerNews's frontpage and colorizes it
 *
 * by Nick Donohue
 * forked from https://github.com/kamranayub/node-reddit. Thanks!
 * License: WTFPL (http://sam.zoy.org/wtfpl/)
 * Attribution is cool but not required
 ********************/

var program = require('commander'), 
    http    = require('http'),
    request = require('request'),
    colors  = require('colors'),
    string  = require('string'),
    openurl = require('openurl'),
    fs      = require('fs'),
    path    = require('path');

program
  .version('0.2.0')
  .usage('hn [OPTIONS] [ARTICLE_NO]')
  .option('-c, --comments', 'open comments URL for article instead')
  .option('-a, --all', 'open both article and comments page')
  .option('-n, --number <n>', 'number of articles to display', parseInt, 28)
  .parse(process.argv);

var homeDir = function() {
  return process.env[(process.platform == 'win32') ? 'USERPROFILE': 'HOME'];
}

var requestURL = 'http://api.ihackernews.com/page',
    commentsURL = 'http://news.ycombinator.com/item?id=',
    cacheFile = path.join(homeDir(),'.node-hn');

var saveCache = function(cacheFileName, jsonBody) {
  fs.writeFile(cacheFileName, jsonBody, function(err){
      if(err) throw err;
  });
};

var getNews = function(preferCached, doOnceCallback, storiesCallback) {

  var parseNews = function(jsonBody) {
    var hn = JSON.parse(jsonBody);
    return hn.items;
  };

  if (preferCached) {
    fs.readFile(cacheFile, function(err, body) {

      if (doOnceCallback) { doOnceCallback(true); }

      if (storiesCallback) {
        var stories = parseNews(body);
        stories.forEach(storiesCallback);
      }

    });
  }
  else {
    request(requestURL, function (err, res, body) {
      if (!err && res.statusCode === 200) {

        saveCache(cacheFile, body);

        if (doOnceCallback) { doOnceCallback(false); }

        if (storiesCallback) {
          var stories = parseNews(body);
          stories.forEach(storiesCallback);
        }
      }
      else {
        fs.readFile(cacheFile, function(err, body) {

          if (doOnceCallback) { doOnceCallback(true); }

          if (storiesCallback) {
            var stories = parseNews(body);
            stories.forEach(storiesCallback);
          }
        });
      }
    }); 
  }
};

(function () {

  var article = program.args[0];

  if (article) {
    if (string(article).isNumeric()) {
      getNews(
        true, 
        false, 
        function(story,index) {

          if (parseInt(article) === index) {

            if (program.comments) {
              openurl.open(commentsURL + story.id);
            }

            else if (program.all) {
              openurl.open(story.url);
              openurl.open(commentsURL + story.id);
            }

            else {
              openurl.open(story.url);
            }
          }
        }
      );
    }
    else {
      console.log(help);
    }
  }

  else {
    getNews(
      false, 
      function(readFromCache) {
        if (readFromCache)  
          { console.log('HackerNews'.red); }
        else                
          { console.log('HackerNews'.yellow); }
      },
      function(story,index) {
        if (index > program.number-1) return;
        var row = "",
          title = story.title.length > 100
                ? story.title.substr(0, 100) + "..." 
                : story.title;

        row += ((index < 10? " ":"") + index.toString()).green;
        row += "\t" + title;
        row += "\n";

        console.log(row);
      }
    );
  }
})();
